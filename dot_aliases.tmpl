#!/bin/zsh

# Easier navigation: .., ..., ...., ....., ~ and -
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"
alias g=" git"

# Detect which `ls` flavor is in use
if ls --color >/dev/null 2>&1; then # GNU `ls`
  colorflag="--color"
else # OS X `ls`
  colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Enable aliases to be sudo’ed
alias sudo='nocorrect sudo'

# Gzip-enabled `curl`
alias gurl='curl --compressed'

# Get week number
alias week='date +%V'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm update npm -g; npm update -g; sudo gem update --system; sudo gem update'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Canonical hex dump; some systems have this symlinked
command -v hd >/dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
command -v md5sum >/dev/null || alias md5sum="md5"

# OS X has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum >/dev/null || alias sha1sum="shasum"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc"
[ -e "${jscbin}" ] && alias jsc="${jscbin}"
unset jscbin

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
# (useful when executing time-consuming commands)
alias badge="tput bel"

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
  alias "$method"="lwp-request -m '$method'"
done

# Make Grunt print stack traces by default
command -v grunt >/dev/null && alias grunt="grunt --stack"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 7'"
alias hax="growlnotify -a 'Activity Monitor' 'System error' -m 'WTF R U DOIN'"

# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

alias start_lexstep_nest_dump="echo 'initialising migration' && cd ~/dev/lexstep/dumps; git pull && sudo USER_KEY=uu54w63y3fdeoudnv28r9khjvtifjo APP_TOKEN=aeez5ydqcgcxuqdmxu2tm85vtw95q7 ~/dev/lexstep/dumps/main.sh"

# Git stuff

function gcap() {
  g ca "$@" && git push 
}

function mkcd() {
  mkdir -p "$@" && cd $1;
}

alias ls=' exa --group-directories-first'
alias la=' ls -a'
alias ll=' ls --git -l'
alias lt=' ls --tree -D -L 2 -I ${TREE_IGNORE}'
alias ltt=' ls --tree -D -L 3 -I ${TREE_IGNORE}'
alias lttt=' ls --tree -D -L 4 -I ${TREE_IGNORE}'
alias ltttt=' ls --tree -D -L 5 -I ${TREE_IGNORE}'

function coderz() {
  z $2;
  echo "switched to $(PWD)";
  coder "$1" "$PWD";
}

function open_dev_essentials() {
  echo "Welcome back, Rai";
  open /Applications/Docker.app;
  open /Applications/Visual\ Studio\ Code\ -\ Insiders.app;
  open /Applications/Motion.app;
  open /Applications/Todoist.app;
  open /Applications/iTerm.app;
  open /Applications/Slack.app;
  open /Applications/Google\ Drive.app;
  open /Applications/Spotify.app;
  open /Applications/Dash.app;
  open /Applications/Brave\ Browser.app;
  open /Applications/Obsidian.app;
  open /Applications/Fantastical.app;
  open /Applications/Focus.app;

}

alias vim="nvim"

alias raisync="rsync -rvzP"

{{- if eq .chezmoi.os "linux" }}
alias pbcopy="xclip -selection clipboard"
alias pbpaste="xclip -selection clipboard -o"
{{end}}

function czm() {
  command="chezmoi edit --apply $@"
  echo "$command"
  eval $command
  rr
}

function cd() {
  builtin cd "$@" && echo $PWD && ls;
}

alias czd="chezmoi diff"
alias czu="chezmoi update"

function lexstep_client_pr() {
  echo "Creating PR for lexstep-nest-client"
  open "https://github.com/LexStep/lexstep-client/compare/nest/develop...rbutera:lexstep-nest-client:develop"
}

function standup2slack(){
  npx md2slack today | pbcopy;
  echo "Will send the following to slack:\n"
  echo "$(pbpaste)"
  echo "\n"
  read -q "REPLY?Continue?"

  case "$REPLY" in 
    y|Y ) echo "yes";;
    n|N ) echo "no";;
    * ) echo "invalid";;
  esac

  echo "Continuing..."
  # nodenv shell 18.7.0;
  # nodenv global 18.7.0;
  # npm install -g md2slack; 

  npx md2slack today | pbcopy;
  osascript -e 'tell application "Keyboard Maestro Engine" to do script "standup to slack"'
}

alias nvimcfg="nv ~/.config/nvim/lua/user/init.lua"

alias gitroot='cd $(git rev-parse --show-toplevel)'

function chezup(){
  CURRENT_DIR=$PWD;
  echo "Navigating to chezmoi directory from $CURRENT_DIR"
  cd ~/.local/share/chezmoi;
  g ca "$@" && git push 
  echo "navigating back to $CURRENT_DIR"
  cd "$CURRENT_DIR";
}

function chezsync(){
  CURRENT_DIR=$PWD;
  echo "Navigating to chezmoi directory from $CURRENT_DIR"
  cd ~/.local/share/chezmoi;
  git stash save
  git pull
  git stash pop
  echo "navigating back to $CURRENT_DIR"
  cd "$CURRENT_DIR";
}

function lexstep_stage_bastion(){
  COMMAND=$@
  echo "Running '$COMMAND' on bastion"
  lexstep_ssh_keygen;
  if [[ -z "$COMMAND" ]]; then
    ssh ec2-user@bastion-stage.lexstep.com
  else
    echo "Found arguments ($COMMAND)"
    ssh ec2-user@bastion-stage.lexstep.com -t "$COMMAND"
  fi
}

function nv(){
  NV_INPUT=$@
  if [[ -z "$NV_INPUT" ]] then
    nvim .
  else
    nvim $@
  fi
}

function ec2_ips(){
  aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].{ip:PrivateIpAddress,name:Tags[?Key==`Name`].Value,launched:LaunchTime}' | jq '[.[][] | { name: .name[0], ip, launched}] | sort_by(.name)'
}

function ec2_ip(){
  NAME=$@
  if [[ -z "$NAME" ]]; then
    ec2_ips
  else
    ASG="stage-$NAME"
    COMMAND="ec2_ips | jq '.[] | select(.name==\"$ASG\") | .ip'"
    result=$(eval "$COMMAND")
    echo $result
  fi
}

function pganalyzeip(){
  ec2_ips | jq '.[] | select(.name=="stage-pganalyze") | .ip'
}

function connect_to_pganalyze(){
  pganalyzeip | pbcopy
  ssh ec2-user@bastion-stage.lexstep.com
}

alias infsta="cd ~/dev/lexstep/nest-infrastructure/server/staging-env"

function staging_infrastructure(){
  infsta
  gitroot
  git reset HEAD --hard
  git-secret reveal -f
  infsta
  terraform init
  terraform plan
}


function apply_staging() {
  message=$@
  if [[ -z $message ]]; then
    echo "missing message"
    exit 1;
  else
    cd /Users/rai/dev/lexstep/nest-infrastructure/server/staging-env
    /Users/rai/dev/lexstep/nest-infrastructure/server/staging-env/apply --refresh all --apply --silent --message "$message"
  fi
}

function apply_prod() {
  message=$@
  if [[ -z $message ]]; then
    echo "missing message"
    exit 1;
  else
    cd /Users/rai/dev/lexstep/nest-infrastructure/server/production-env
    /Users/rai/dev/lexstep/nest-infrastructure/server/production-env/apply --apply --message "$message"
  fi
}

alias pinger_start="/Users/rai/dev/lexstep/pinger/scripts/start.sh"
alias pinger_stop="/Users/rai/dev/lexstep/pinger/scripts/stop.sh"

function gsync() {
  {{- if eq .chezmoi.os "darwin" }}
  git fetch --all && for branch in $(git branch | gsed '/*/{$q;h;d};$G' | tr -d '*') ; do git checkout $branch && git merge --ff-only || break ; done
  {{else}}
  git fetch --all && for branch in $(git branch | sed '/*/{$q;h;d};$G' | tr -d '*') ; do git checkout $branch && git merge --ff-only || break ; done
  {{end}}
}

alias gca="g ca"

function get_ssm_dotfile() {
	NAME=$1
	ENVIRONMENT=$2
	if [[ -z "$ENVIRONMENT" ]]; then
    ENVIRONMENT="STAGE"
	fi
	if [[ -z "$NAME" ]]; then
		echo "MISSING DOTFILE NAME, EXITING!"
		return 1
	else
		aws ssm get-parameters --name "/$ENVIRONMENT/dotfiles/$NAME" --with-decryption 	
	fi
}


function gcar(){
  echo "Quickly releasing change..."
  gca "$@" && \
    yarn release:patch --force
}

alias nvim_config="nv ~/.config/nvim/lua/user/init.lua"

alias psql_pidgey="PGPASSWORD=postgres psql -h pidgey -p 9003 -U postgres --dbname lexstep"

alias fix-spotlight="find . -type d -path './.*' -prune -o -path './Pictures*' -prune -o -path './Library*' -prune -o -path '*node_modules/*' -prune -o -type d -name 'node_modules' -exec touch '{}/.metadata_never_index' \; -print"

alias restore_lexstep_db="psql -d 'postgres://postgres:postgres@localhost:5432/postgres' -c 'DROP DATABASE lexstep WITH (force);'; pg_restore --verbose -d 'postgres://postgres:postgres@localhost:5432/postgres' ~/Downloads/lexstep.dump --jobs=6 --clean --create --if-exists"
